{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random \n",
    "import numpy as np\n",
    "training=[]\n",
    "labels=[]\n",
    "\n",
    "\n",
    "english_file=open(\"english.txt\") #open the german text file\n",
    "ewords=english_file.readlines()\n",
    "ewords=[s.replace('\\n', '') for s in ewords]\n",
    "random.shuffle(ewords)\n",
    "for word in ewords:\n",
    "    if (len(word)) == 5: #only using 5 letter words\n",
    "        e=[]\n",
    "        for char in word:\n",
    "            e.append(ord(char))\n",
    "    training.append(e)\n",
    "    labels.append(0)\n",
    "english_file.close()\n",
    "        \n",
    "german_file=open(\"german.txt\")  #open the german text file\n",
    "gwords=german_file.readlines()\n",
    "gwords=[s.replace('\\n', '') for s in gwords]\n",
    "random.shuffle(gwords)\n",
    "for word in gwords: #iterate through each line \n",
    "    if (len(word)) == 5: #only using 5 letter words\n",
    "        g=[]\n",
    "        for char in word:\n",
    "            g.append(ord(char))\n",
    "    training.append(g)\n",
    "    labels.append(1)\n",
    "german_file.close()\n",
    "        \n",
    "italian_file=open(\"italian.txt\")  #open the german text file\n",
    "iwords=italian_file.readlines()\n",
    "iwords=[s.replace('\\n', '') for s in iwords]\n",
    "random.shuffle(iwords)\n",
    "for word in iwords: #iterate through each line \n",
    "    if (len(word)) == 5: #only using 5 letter words\n",
    "        i=[]\n",
    "        for char in word:\n",
    "            i.append(ord(char))\n",
    "    training.append(i)\n",
    "    labels.append(2)\n",
    "italian_file.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neural_network import MLPClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_model = KNeighborsClassifier()\n",
    "svm_model = svm.SVC()\n",
    "mlp_nn = MLPClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(training, labels, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_model.fit(X_train, y_train)\n",
    "svm_model.fit(X_train, y_train)\n",
    "mlp_nn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(knn_model.predict(X_test))\n",
    "print(svm_model.predict(X_test))\n",
    "print(mlp_nn.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
